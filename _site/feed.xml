<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JustWrite</title>
    <description>평범한 개발자의 평범한 개발 이야기</description>
    <link>https://justwrite99.github.io/</link>
    <atom:link href="https://justwrite99.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 14 Dec 2020 10:20:31 +0900</pubDate>
    <lastBuildDate>Mon, 14 Dec 2020 10:20:31 +0900</lastBuildDate>
    <generator>Jekyll v4.1.1</generator>
    
      <item>
        <title>레거시 코드 개선하기#1 - 피처 수준으로 나누기</title>
        <description>&lt;p&gt;개발 초기부터 관여하지 않은 모듈을 유지보수하는 일은 쉽지 않습니다. 특히 코드 전체적으로 의도가 잘 드러나지 않는다면 유지보수하는 일은 매우 깊은 빡침을 불러일으킵니다. 그래서 이런 경우라면 보통 유지보수 업무는 최소의 노력을 들이는 방향으로 진행됩니다. 비용 측면에서는 타당한 방향이지만 이런 형태의 유지보수는 시간이 흐르면 흐를수록 개발은 점점 재미가 없어지고 일은 일대로 고달파집니다.&lt;/p&gt;

&lt;p&gt;이런 고통을 없애는 가장 좋은 방법은 좋은 코드를 만드는 팀(또는 회사)로 이동하는 것입니다. 하지만 안타깝게도 이 방법은 자주 사용할 수가 없습니다. 고통스럽지만 직접 개선하는 것 외에는 방법이 없습니다. 둘 중에 하나를 선택해야 합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;계속 고통 받으면서 아무것도 하지 않기&lt;/li&gt;
  &lt;li&gt;계속 고통 받으면서 조금이라도 개선하려고 노력하기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;전 1번으로 매너리즘에 빠져 허우적대다가 2번으로 선회했습니다. 그리고 더디고 짜증나고 고통스럽지만 어떻게든 함께 고민하고 조금씩 개선해 나가면서 더 많은 것들을 알게 됐습니다.&lt;/p&gt;

&lt;p&gt;레거시 코드를 개선하기 위해 많은 생각과 실험과 논의들이 있었지만 결과적으로 방법은 의외로 단순합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;레거시 코드를 개선하는 알고리즘: &lt;br /&gt;
(1) 코드를 주의 깊게 살펴본다.&lt;br /&gt;
(2) 어떤 피처들이 있는지 나열한다.&lt;br /&gt;
(3) 피처 단위로 코드를 분리한다.&lt;br /&gt;
(4) 만족스러울 때 까지 (1) ~ (3) 단계를 반복한다.&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;제가 회사에서 유지보수하는 SW 모듈은 사용자의 안드로이드 모바일을 통해 TV를 제어하거나 TV 벤더가 제공하는 TV를 대상으로 하는 다양한 서비스의 프론트 엔드를 제공합니다.&lt;/p&gt;

&lt;p&gt;개발 초기에는 단순하게 TV를 제어하는 기능만 있었지만 시간이 흘러 TV를 대상으로 하는 다양한 서비스의 프론트 엔드 기능이 탑재가 됐습니다. 안타까운 현실은 저는 이런 신규 기능 개발에 전혀 참여하지 못했지만 지금은 이 모듈을 유지보수하고 있다는 사실입니다. 그리고, 코드의 품질은 … ㅠㅜ&lt;/p&gt;

&lt;p&gt;개선을 위해 &lt;strong&gt;&lt;em&gt;(1) 코드를 주의 깊게 살펴보았습니다&lt;/em&gt;&lt;/strong&gt;. 여러가지 기능이 논리적으로만 분리되어있지 물리적으로는 하나의 안드로이드 모듈에 모두 함께 존재했습니다. 사용자 수준이 최상위 수준에사 &lt;strong&gt;&lt;em&gt;(2) 피처들을 나열했습니다&lt;/em&gt;&lt;/strong&gt;. 그리고, 최상위 수준의 피처들을 기준으로 &lt;strong&gt;&lt;em&gt;(3) 코드를 분리하는 계획을 세웠습니다&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;우선은 최상위 피처 수준에서 모든 코드들을 피처 단위로 분리해야 합니다. 동일한 안드로이드 프로젝트 내부에 피처 별로 서브 모듈을 만들어 분리하는 방법을 적용하면 됩니다. 다만 전체 코드를 대상으로 이런 작업을 진행하는 것은 엄청난 변화를 만들 수 있으므로 가장 만만한 피처를 대상으로 서브 모듈화를 진행합니다.&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;
    &lt;img src=&quot;/assets/img/2020-12-11/structure1.png&quot; width=&quot;80%&quot; /&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app/feature1&lt;/code&gt; 모듈의 코드를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;submodule_feature1&lt;/code&gt; 모듈로 이동합니다. 이때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;submodule_feature1&lt;/code&gt; 모듈이 필요로하는 모든 외부 기능에 대한 추상화를 하고 관련된 모든 인터페이스는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;required interfaces&lt;/code&gt;에 추가합니다. 그리고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;submodule_fature1&lt;/code&gt; 모듈은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;required interfaces&lt;/code&gt;를 통해 외부 모듀에 대한 의존성이 전혀 없는 상태가 됩니다.&lt;/p&gt;

&lt;p&gt;그리고, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt; 모듈은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;submodule_feature1&lt;/code&gt; 모듈의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;required interfaces&lt;/code&gt;를 구현합니다. 사용자 요청에 따라 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;submodule_feature1&lt;/code&gt; 모듈의 Entry Page를 런칭하기 전에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt; 모듈은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature1_injector&lt;/code&gt;를 통해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;submodule_feature1&lt;/code&gt; 모듈이 필요로 하는 외부 기능과 연관된 객체를 생성해 주입합니다.&lt;/p&gt;

&lt;p&gt;중요한 부분은 기존에 없던 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;required interfaces&lt;/code&gt;를 정의했다는 것입니다. 이 부분을 통해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;submodule_feature1&lt;/code&gt; 모듈은 외부에 대한 의존성이 전혀 없는 상황이 만들어 집니다. 그리고 이런 인터페이스를 통해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;submodule_feature1&lt;/code&gt; 모듈은 이전과 다른 수준의 Testabiltiy를 확보할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;required interfaces&lt;/code&gt; 모듈이 정의하는 인터페이스를 사용해 Mock Object를 만들면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;submodlue_feature1&lt;/code&gt; 모듈의 전체 기능을 테스트할 수 있습니다. 여전히 유닛 테스팅은 불가능 하지만 SW 시스템 전체에 대해 매뉴얼 테스트 밖에 할 수 없는 상황보다는 진일보한 것이라고 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이전 그림과 크게 달라진 부분은 없지만 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;submoule_feature1&lt;/code&gt; 모듈은 피처(feature) 수준의 테스트 코드를 확보해 독자적인 검증 과정을 거칠수 있게 됐습니다.&lt;/p&gt;

&lt;p align=&quot;left&quot;&gt;
    &lt;img src=&quot;/assets/img/2020-12-11/structure2.png&quot; width=&quot;80%&quot; /&gt;&lt;br /&gt;
&lt;/p&gt;

&lt;p&gt;동일한 방법을 다른 피처에도 적용하여 서브 모듈화를 진행할 수 있습니다. 그리고, 각 서브 모듈은 테스트 코드를 통해 자체적으로 검증할 수 있는 수단을 마련합니다. 그리고 이런 검증 수단을 기반으로 각 피처 모듈은 알아서 코드르 개선하던 검증을 좀 더 강화하기 위한 테스트 코드를 개발하던 알아서 개선을 진행하면 됩니다. 모든 것이 뭉쳐있던 이 전과는 다르게 피처간의 의존성은 전혀 없습니다.&lt;/p&gt;

&lt;p&gt;서로 방이 다르니 방을 어지럽히던 깨끗하게 하던 방 주인이 알아서 하는 겁니다.&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Dec 2020 00:00:00 +0900</pubDate>
        <link>https://justwrite99.github.io/2020-12/refactor-legacy-code</link>
        <guid isPermaLink="true">https://justwrite99.github.io/2020-12/refactor-legacy-code</guid>
        
        
        <category>refactoring</category>
        
        <category>modular</category>
        
      </item>
    
      <item>
        <title>조금씩 쌓아가기, 인생도 개발도</title>
        <description>&lt;p&gt;개발자 블로그가 포트폴리오가 되는 세상인데 늦었지만 지금이라도 조금씩 쌓는다는 느낌으로 시작하려 합니다. 조금씩 조금씩 쌓다 보면 스스로 놀랄 날이 오겠죠?&lt;/p&gt;

&lt;p&gt;공든 탑이라는 말에 공감을 많이 못했었는데 나이가 차서 그런지, 비루하지만 경험이 조금 보태져서 그런지 꾸준한 의미있는 반복의 가치가 중요하게 다가옵니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;/assets/img/2020-11-30/공든탑.jpeg&quot; width=&quot;60%&quot; /&gt;&lt;br /&gt;
    무너져도 의미가 있어!! 쌓기위해 드렸던 노력은 고스란히 나에게!!&lt;br /&gt;
    출처: &lt;a href=&quot;https://steemit.com/kr/@woolgom/4xgpxs&quot;&gt;울곰 다이어리 : 공든 탑&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;생각해보면 SW 개발도 이런 형태여야 하는데 단기 일정에 몰입해 타의든 자의든 뒤가 없는 개발을 하는 때를 생각해보니 부끄럽습니다. 여전히 부끄러울 때가 많지만 지금은 어떻게든 주위 사람들과 조금이라도 나은 형태의 개발에 대해서 논의하고 실천하려고 하는 부분도 있으니 쌤쌤으로 쳐야겠습니다.&lt;/p&gt;

&lt;p&gt;분명 검증된 SW 블록을 하나씩 쌓아가는 형태가 올바른 형태인 것을 알지만 왜 잘 안됐던 것일까요? 다양한 이유가 있겠지만 글로만 알고 실천하려고 하지 않은 나 자신 때문이라고 생각해야 할 것 같습니다. 이렇게 생각하지 않으면 전부 남 탓이라고 생각하던 시절로 돌아갈 테니까요. 몇 년 동안 정말 개발이 재미없었습니다. 철저한 월급 개발자였었죠.&lt;/p&gt;

&lt;p&gt;지금은 현실 타파를 위한 몇 년 동안의 노력으로 다시금 개발이 즐거워졌습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;/assets/img/2020-11-30/selfreflection.png&quot; width=&quot;60%&quot; /&gt;&lt;br /&gt;
    모든 문제 해결은 나를 돌아보는 것에서 부터&lt;br /&gt;
    출처: &lt;a href=&quot;https://medium.com/@itsme_v/teamcomm-self-reflection-%EC%9E%90%EA%B8%B0%EC%84%B1%EC%B0%B0-3b3b9dde5d69&quot;&gt;[TeamComm.] SELF REFLECTION/자기성찰&lt;/a&gt;
&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;내가 좀 더 좋은 형태의 개발에 익숙했더라면, 내가 좀 더 주위에 좋은 개발의 형태를 알려줬더라면, 내가 좀 더 …&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;역설적이지만 조금 더 알았더니 개발이 더욱더 어렵게 느껴집니다. 그래도 좋은 형태의 개발이 어떤 것인지 살짝 감히 잡히는 것 같은 느낌이 예전과는 다르게 현실의 벽을 직시해도 버틸 수 있는 버팀목 역할을 해주고 있습니다.&lt;/p&gt;

&lt;p&gt;다양한 주제 중에서도 특히 도메인 주도 설계(Domain Driven Design), 테스트 주도 개발(Test Driven Development) 그리고, 피처 주도 개발(Feature Driven Developmet)가 좋은 개발 흐름에 대한 통찰을 준 것 같습니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;/assets/img/2020-11-30/ddd-tdd-fdd.png&quot; width=&quot;80%&quot; /&gt;&lt;br /&gt;
    좋은 개발 흐름
&lt;/p&gt;

&lt;p&gt;중요 피처를 시작으로 좋은 개발 흐름을 실천합니다. 우선 동료들과 함께 도메인 모델을 논의하고 좋은 이름을 찾습니다. 그리고, 이런 이름을 기반으로 TDD를 진행합니다. TDD를 통해 작성된 코드가 도메인 모델을 잘 드러내는지 확인합니다. 코드가 이런 부분을 잘 드러내지 못한다면 당연히 개선합니다. 테스트 코드가 있기에 개선은 어렵지 않은 일이 됩니다. 피처 별로 이런 흐름을 반복합니다. 결과적으로 코드가 곧 도메인 모델이 됩니다.&lt;/p&gt;

&lt;p&gt;익히 알고 있는 것들의 나열일 뿐이라 이해가 어렵지는 않습니다. 하지만 실행하는 것은 전혀 다른 일이 됩니다. 혼자 개발하는 것이 아니기에 혼자 짊어질 필요는 없습니다. 동료들과 함께 어떻게 하면 더 나아질 수 있는지 열심히 논의하고 더디지만 조금씩 쌓아가면 어떨까 합니다.&lt;/p&gt;

&lt;p&gt;인생도 개발도 말이죠.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Nov 2020 00:00:00 +0900</pubDate>
        <link>https://justwrite99.github.io/2020-11/log01</link>
        <guid isPermaLink="true">https://justwrite99.github.io/2020-11/log01</guid>
        
        
        <category>daily log</category>
        
      </item>
    
  </channel>
</rss>